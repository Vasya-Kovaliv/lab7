import random

def generate_keys(p, g):
    a = random.randint(1, p - 1)
    b = pow(g, a, p)
    return a, b

def encrypt_message(message, p, g, b):
    block_size = 3  # Змінена логіка
    encrypted_blocks = []
    for i in range(0, len(message), block_size):
        block = message[i:i+block_size]
        m = 0
        for c in block:
            m = m * 1000 + ord(c)
        k = random.randint(1, p - 1)
        x = pow(g, k, p)
        y = (pow(b, k, p) * m) % p
        encrypted_blocks.append((x, y))
    return encrypted_blocks

def decrypt_message(encrypted_blocks, p, a):
    def mod_inverse(a, m):
        def extended_gcd(a, b):
            if b == 0:
                return a, 1, 0
            gcd, x1, y1 = extended_gcd(b, a % b)
            x = y1
            y = x1 - (a // b) * y1
            return gcd, x, y

        gcd, x, y = extended_gcd(a, m)
        if gcd != 1:
            raise ValueError("Modular inverse does not exist.")
        return x % m

    block_size = 3  # Змінена логіка
    decrypted_message = ""
    for block in encrypted_blocks:
        x, y = block
        s = pow(x, a, p)
        m = (y * mod_inverse(s, p)) % p
        block_str = str(m).zfill(block_size)
        while len(block_str) % 3 != 0:
            block_str = "0" + block_str
        for i in range(0, len(block_str), 3):
            code = int(block_str[i:i+3])
            if code != 0:
                decrypted_message += chr(code)
    return decrypted_message

def main():
    p = 541   # Просте число p
    g = 10    # Примітивний корінь g

    # Генерація ключів
    a, b = generate_keys(p, g)
    print("Private Key (a):", a)
    print("Public Key (b):", b)

    message = "Hello world!"

    # Шифрування повідомлення
    encrypted_blocks = encrypt_message(message, p, g, b)
    print("Encrypted Blocks:", encrypted_blocks)

    # Розшифрування повідомлення
    decrypted_message = decrypt_message(encrypted_blocks, p, a)
    print("Decrypted Message:", decrypted_message)
    print("Decrypted Message is correct:", decrypted_message == message)

if __name__ == '__main__':
    main()
